// Manage versioning

File getVersionFile() {
    def versionFile = new File(project.getProjectDir(), 'version.properties')
    if (!versionFile.exists()) {
        versionFile = new File(project.getRootDir(), 'version.properties')
    }
    return versionFile
}

def readVersion() {
    def versionFile = getVersionFile()
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if(!version['sdk']) version['sdk'] = "00"
    if(!version['screen']) version['screen'] = "0"
    if(!version['major']) version['major'] = "00"
    if(!version['minor']) version['minor'] = "01"
    if(!version['patch']) version['patch'] = "00"

    if (!versionFile.exists()) {
        project.logger.lifecycle('Generating new property version file...')
        generateProperties(version)
    }
    return version
}

ext.readVersionName = {
    project.logger.info('Reading version name...')
    def version = readVersion()
    return "${version['major'] as int}.${version['minor'] as int}.${version['patch'] as int}"
}

ext.readVersionCode = {
    project.logger.info('Reading version code...')
    def version = readVersion()
    def build = (version['sdk'] + version['screen'] + version['major']
            + version['minor'] + version['patch']) as int
    return build
}

def generateProperties(version) {
    def versionFile = new File(project.getRootDir(), 'version.properties')
    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        if (stream != null) stream.close()
    }
}

def updateProperty(key, value) {
    def versionFile = getVersionFile()
    def version = readVersion()
    version[key] = value.toString()
    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        if (stream != null) stream.close()
    }
}

def incrementVersionNumber(type="minor") {
    def version = readVersion()
    def major = version['major'] as int
    def minor = version['minor'] as int
    def patch = version['patch'] as int
    if (type == 'major') {
        major++
        minor = 0
    } else if (type == 'minor') {
        minor++
    } else if (type == 'patch') {
        patch++
    }
    if (type == 'patch' && patch >= 100) {
        minor++
        patch = 0
    } else if (type == 'minor' && minor >= 100) {
        major++
        minor = 0
        patch = 0
    }
    updateProperty('major', major < 10 ? '0' + major : major.toString())
    updateProperty('minor', minor < 10 ? '0' + minor : minor.toString())
    updateProperty('patch', patch < 10 ? '0' + patch : patch.toString())
    project.logger.lifecycle('Version is now... ' + readVersionName())
    return readVersionName()
}

task doMinorVersionIncrement() {
    doLast {
        project.logger.lifecycle('Incrementing minor version...')
        print incrementVersionNumber('minor')
    }
}

task doPatchVersionIncrement() {
    doLast {
        project.logger.lifecycle('Incrementing patch version...')
        print incrementVersionNumber('patch')
    }
}

task doUpdateVersion() {
    doLast {
        project.logger.lifecycle('Incrementing ' + key + ' version to ' + value)
        updateProperty(key, value)
    }
}
