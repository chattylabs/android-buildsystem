// Common android gradle configuration
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

/*
 * Option to configure to disable Dex and Images Cruncher on CI
 *
 * Usage: ./gradlew build -PisCi=true
 */
project.ext.enableOption = project.hasProperty("isCI") ? !project.isCI : true

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/INDEX.LIST'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        checkAllWarnings false
        checkReleaseBuilds false
        //Some libraries have issues with this.
        disable 'InvalidPackage'
        disable 'OldTargetApi'
        //Lint gives this warning but SDK 20 would be Android L Beta.
        //disable 'IconDensities'
        //For testing purpose. This is safe to remove.
        //disable 'IconMissingDensityFolder'
    }

    signingConfigs {
        debug {
            storeFile file("../android-buildsystem/debug.keystore")
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = false
            signingConfig signingConfigs.debug
        }
    }

    testOptions {

        // Enable this option on your own gradle file if you need it
        //unitTests.returnDefaultValues = true

        // Always show the result of every unit test, even if it passes.
        unitTests {
            // Robolectric
            includeAndroidResources = true
            // Tests
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }
    }

    dexOptions {
        preDexLibraries = enableOption
    }
    aaptOptions {
        cruncherEnabled = enableOption
    }
}

if (kotlin_version == null) throw new NullPointerException(
        "Please define \"ext.kotlin_version\" in your root gradle file")

dependencies {
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

project.ext.elastic = { notation, projectName ->
    if (findProject(projectName.toString())) {
        println "adding local dependency on project $projectName"
        project(projectName)
    } else {
        println "adding external dependency on project $notation"
        notation
    }
}

tasks.withType(Javadoc) {
    //excludes = ['**/*.kt']
    enabled = false
}